---
// Lineup component for Hopkins Creek Festival
import { fetchArtists } from "../lib/strapi";

interface ArtistData {
  name: string;
  annotation?: string; // [live], [GER], [UK], etc.
  size?: "small" | "medium" | "large" | "xl";
  socialLink?: string; // URL for artist's social media or website
}

// Fetch artists from Strapi CMS
let strapiArtists: import("../interfaces/strapi").Artist[] = [];

try {
  strapiArtists = await fetchArtists();
} catch (error) {
  console.error("Failed to fetch artists from Strapi:", error);
  // Gracefully handle error - component will show empty lineup
}

// Transform Strapi data to component format
const artists: ArtistData[] = strapiArtists.map((artist) => {
  let annotation = "";

  // Build annotation from country and live status
  if (artist.country && artist.isLive) {
    annotation = `${artist.country}, live`;
  } else if (artist.country) {
    annotation = artist.country;
  } else if (artist.isLive) {
    annotation = "live";
  }

  return {
    name: artist.name,
    annotation: annotation || undefined,
    size: "medium" as const, // Default size, can be customized later
    socialLink: artist.socialLink, // Include social link from Strapi
  };
});

// Sort by display order, then alphabetically
artists.sort((a, b) => {
  // Find original Strapi data for display order
  const strapiA = strapiArtists.find((sa) => sa.name === a.name);
  const strapiB = strapiArtists.find((sa) => sa.name === b.name);

  const orderA = strapiA?.displayOrder ?? 999;
  const orderB = strapiB?.displayOrder ?? 999;

  if (orderA !== orderB) {
    return orderA - orderB;
  }

  return a.name.localeCompare(b.name);
});
---

<section class="px-6 py-4 sm:px-8 sm:py-8 md:px-12 md:py-12">
  <div class="max-w-6xl mx-auto">
    {
      artists.length > 0 ? (
        <div class="lineup-grid">
          {artists.map((artist) => (
            <div
              class={`artist-item ${artist.size || "medium"}`}
              data-artist={artist.name}
            >
              <h2 class="artist-name">
                {artist.socialLink ? (
                  <a
                    href={artist.socialLink}
                    class="artist-link"
                    target="_blank"
                    rel="noopener noreferrer"
                    aria-label={`Visit ${artist.name}'s page`}
                  >
                    {artist.name}
                  </a>
                ) : (
                  artist.name
                )}
                {artist.annotation && (
                  <span class="artist-annotation">[{artist.annotation}]</span>
                )}
              </h2>
            </div>
          ))}
        </div>
      ) : (
        <div class="text-center text-neutral-600">
          <p>Artist lineup coming soon...</p>
        </div>
      )
    }
  </div>
</section>

<style>
  .lineup-container {
  }

  .lineup-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    max-width: 100%;
    text-align: center;
    gap: var(--space-s) var(--space-m);

    @media (max-width: 768px) {
      gap: var(--space-xs) var(--space-s);
    }

    @media (max-width: 480px) {
      gap: var(--space-2xs) var(--space-xs);
      padding: 0 var(--space-xs);
    }
  }

  .artist-item {
    position: relative;
    white-space: nowrap;
    text-align: center;
    opacity: 0;
    animation: fadeInUp 0.6s ease forwards;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .lineup-grid:hover .artist-item {
    opacity: 0.6;
  }

  .lineup-grid:hover .artist-item:hover {
    opacity: 1;
    transform: translateY(var(--random-y, 0px)) scale(1.05);
  }

  /* Ensure link hover states work within the grid hover context */
  .lineup-grid:hover .artist-item:hover .artist-link {
    color: var(--link-hover-color, #666);
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(calc(20px + var(--random-y, 0px)));
    }
    to {
      opacity: 1;
      transform: translateY(var(--random-y, 0px));
    }
  }

  .artist-name {
    font-weight: 600;
    margin: 0;
    font-size: clamp(1.25rem, 4vw, 2rem);
    line-height: 1.2;

    @media (max-width: 768px) {
      font-size: clamp(1rem, 3.5vw, 1.5rem);
    }

    @media (max-width: 480px) {
      font-size: clamp(0.9rem, 3vw, 1.25rem);
    }
  }

  .artist-link {
    color: inherit;
    text-decoration: none;
    transition: color var(--animation-speed-fast, 0.2s)
      var(--cubic-bezier, ease);
    display: inline-block; /* Ensure proper hover area */

    &:where(:hover, :focus-visible) {
      color: var(--link-hover-color, #666);
      text-decoration: none;
    }
  }

  .artist-annotation {
    font-size: 0.6em;
    font-style: normal;
    font-weight: 200;
    margin-left: var(--space-5xs);
    opacity: 1;

    @media (max-width: 768px) {
      font-size: 0.65em;
    }

    @media (max-width: 480px) {
      font-size: 0.7em;
      margin-left: var(--space-4xs);
    }
  }

  /* All artists same size */
  .artist-item {
    /* Size will be inherited from h2 design system */
  }
</style>

<script>
  // Add subtle random positioning for organic layout
  document.addEventListener("DOMContentLoaded", () => {
    const artists = document.querySelectorAll(".artist-item");
    artists.forEach((artist, index) => {
      const element = artist as HTMLElement;

      // Add subtle random positioning for organic layout

      // Add staggered animation delay
      element.style.animationDelay = `${index * 0.05}s`;
    });
  });
</script>
