---
/**
 * Navigation Component
 *
 * @description A component that displays the navigation menu for the website
 */
import Logo from './Logo.astro';
import ResponsiveToggle from './ResponsiveToggle.astro';
---

<div id="main-navigation" class="py-8">
  <div class="container">
    <Logo />
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul>
          <slot />
        </ul>
      </nav>
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile">
      <ul>
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const mainNav = document.querySelector(
      '#main-navigation'
    ) as HTMLElement | null;
    if (!mainNav) return;

    const dropdownButtons = [
      ...mainNav.querySelectorAll('.has-dropdown button'),
    ] as HTMLButtonElement[];

    /**
     * Sets active menu item based on current pathname
     */
    const setActiveMenuItem = (): void => {
      const menus = mainNav.querySelectorAll('nav > ul');
      const currentPath = window.location.pathname;

      menus.forEach((menu) => {
        const links = menu.querySelectorAll('a');
        links.forEach((link) => {
          const href = link.getAttribute('href');
          if (href === currentPath) {
            link.classList.add('active');
          } else {
            link.classList.remove('active');
          }
        });
      });
    };

    /**
     * Checks if dropdown would overflow viewport
     */
    const isOutOfViewport = (element: Element): boolean => {
      const bounds = element.getBoundingClientRect();
      return (
        bounds.right > (window.innerWidth || document.documentElement.clientWidth)
      );
    };

    /**
     * Opens a dropdown menu
     */
    const openDropdown = (button: HTMLButtonElement): void => {
      const dropdown = button.parentNode?.querySelector(
        'ul'
      ) as HTMLUListElement | null;
      if (!dropdown) return;

      button.classList.add('show');
      button.setAttribute('aria-expanded', 'true');

      // Adjust position if needed
      if (isOutOfViewport(dropdown)) {
        dropdown.style.left = 'auto';
        dropdown.style.right = '0';
      }
    };

    /**
     * Closes a dropdown menu
     */
    const closeDropdown = (button: HTMLButtonElement): void => {
      button.classList.remove('show');
      button.setAttribute('aria-expanded', 'false');

      const dropdown = button.parentNode?.querySelector(
        'ul'
      ) as HTMLUListElement | null;
      if (dropdown) {
        dropdown.style.left = '';
        dropdown.style.right = '';
      }
    };

    /**
     * Closes all open dropdowns
     */
    const closeAllDropdowns = (): void => {
      dropdownButtons.forEach(closeDropdown);
    };

    /**
     * Toggles dropdown open/closed state
     */
    const toggleDropdown = (event: Event): void => {
      event.preventDefault();
      const button = event.target as HTMLButtonElement;
      const isOpen = button.getAttribute('aria-expanded') === 'true';

      closeAllDropdowns();

      if (!isOpen) {
        openDropdown(button);
      }
    };

    /**
     * Handles sticky navigation shadow effect
     */
    const handleStickyNav = (): void => {
      if (window.scrollY > 10) {
        mainNav.classList.add('sticky');
      } else {
        mainNav.classList.remove('sticky');
      }
    };

    // Event Listeners
    dropdownButtons.forEach((button) => {
      button.addEventListener('click', toggleDropdown);
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', (event: Event) => {
      const target = event.target as Element;
      if (!target.closest('.has-dropdown')) {
        closeAllDropdowns();
      }
    });

    // Close dropdowns on Escape key
    document.addEventListener('keydown', (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        closeAllDropdowns();
      }
    });

    // Initialize
    setActiveMenuItem();
    window.addEventListener('scroll', handleStickyNav, { passive: true });
    handleStickyNav(); // Initial check
  });
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/mixins' as *;
  @use '../assets/scss/base/breakpoint' as *;

  #main-navigation {
    position: sticky;
    top: 0;
    z-index: 1000;
    background-color: var(--background-color);

    transition: box-shadow 0.3s var(--cubic-bezier);

    &.sticky {
      box-shadow: 0 4px 20px 0 rgba(0, 0, 0, 0.15);
      border-bottom: 1px solid var(--border-color-subtle);
    }

    // Fallback for browsers that don't support position: sticky
    @supports not (position: sticky) {
      position: fixed;
      width: 100%;
      z-index: 1000;

      & + * {
        margin-top: var(--space-xl);
      }
    }

    > .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }

    // Mobile-first: show mobile menu by default
    .mobile-menu {
      display: none;

      &.show {
        display: flex;
        flex-direction: column;
      }
    }

    .responsive-toggle {
      display: flex;
      align-items: center;
      gap: var(--space-2xs);
    }

    .desktop-menu {
      display: none;
    }

    // Desktop: switch to desktop menu at nav breakpoint
    @include breakpoint('nav') {
      .mobile-menu {
        display: none !important;
      }

      .responsive-toggle {
        display: none;
      }

      .desktop-menu {
        display: flex;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: var(--space-m);
    }

    a,
    button {
      color: var(--foreground-color);
    }

    nav {
      > ul {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-m);
        list-style: none;
        margin: 0;
        padding: 0;
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      margin-block-start: var(--space-m);
      border: 1px solid var(--border-color-subtle);
      border-radius: var(--radius-l);
      padding: var(--space-m);

      > ul {
        flex-direction: column;
        gap: var(--space-s);
      }

      a,
      button {
        text-decoration: none;
        color: var(--foreground-color);
        font-size: var(--font-size-m);
        line-height: var(--line-height-m);
        font-weight: var(--font-weight-medium);
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: var(--space-2xs);
        background: none;
        border: none;
        padding: 0;
        font-size: inherit;
        font-weight: inherit;
        cursor: pointer;
        text-decoration: none;
        font-family: inherit;

        svg {
          transition: transform var(--animation-speed-fast) var(--cubic-bezier);
        }

        &.show svg {
          transform: rotate(180deg);
        }
      }

      ul {
        display: none;
        position: absolute;
        flex-direction: column;
        gap: var(--space-2xs);
        top: 100%;
        left: 0;
        right: 0;
        z-index: 9999;
        background-color: var(--background-color);
        border: 2px solid var(--border-color-subtle);
        border-radius: var(--radius-l);
        box-shadow: var(--elevation-4);
        padding: var(--space-m);
        min-width: 275px;
        margin-top: var(--space-xs);

        @media (prefers-reduced-motion: no-preference) {
          transition: opacity var(--animation-speed-fast) var(--cubic-bezier);
        }

        li {
          list-style: none;
          margin: 0;
          padding: 0;
        }

        a {
          display: block;
          padding: var(--space-xs) var(--space-s);
          text-decoration: none;
          border-radius: var(--radius-s);
          transition: background-color var(--animation-speed-fast) var(--cubic-bezier);

          &:hover,
          &:focus {
            background-color: var(--color-neutral-200);
          }
        }
      }

      > button.show ~ ul {
        display: flex;
      }
    }

    .darkmode-toggle {
      padding: 0;
      border: none;
    }
  }

  // Ensure body doesn't have unnecessary top margin that could interfere
  body {
    margin: 0;
  }

  // Smooth scroll behavior when jumping to anchors past sticky nav
  html {
    scroll-padding-top: calc(var(--space-xl) + var(--space-l));
  }
</style>
