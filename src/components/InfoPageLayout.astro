---
import DefaultLayout from '../layouts/DefaultLayout.astro';
import { Icon } from 'astro-icon/components';
import PageHeader from './PageHeader.astro';
import { Accordion, AccordionItem } from 'accessible-astro-components';

interface InfoLink {
  text: string;
  url: string;
}

interface InfoSection {
  title: string;
  content: any[];
  links?: InfoLink[];
}

interface Props {
  pageTitle: string;
  pageSubtitle?: string;
  metaDescription?: string;
  infoSections?: InfoSection[];
}

const { pageTitle, pageSubtitle, metaDescription, infoSections } = Astro.props;
---

<DefaultLayout
  title={`${pageTitle} - Hopkins Creek Festival`}
  description={metaDescription}
>
  <section class="info-page">
    <PageHeader title={pageTitle} subtitle={pageSubtitle} />

    <div class="info-content">
      <div class="container">
        {
          infoSections && infoSections.length > 0 && (
            <div class="info-sections">
              <Accordion>
                {infoSections.map((section, index) => (
                  <AccordionItem 
                    title={section.title}
                    variant="chevron"
                    name="info-accordion"
                    open={index === 0}
                  >
                    <div class="section-content">
                      {/* 
                        Render structured content blocks from CMS data
                        Handles paragraphs with inline links and unordered lists
                      */}
                      {section.content.map((block) => {
                        // Render paragraph blocks with potential inline links
                        if (block.type === 'paragraph') {
                          return (
                            <p>
                              {block.children.map((child: any) => {
                                const hasLink = child.marks?.some((mark: any) => mark.type === 'link');
                                
                                if (hasLink) {
                                  const linkMark = child.marks.find((mark: any) => mark.type === 'link');
                                  return (
                                    <a href={linkMark.attrs.href} class="content-link">
                                      {child.text}
                                    </a>
                                  );
                                }
                                
                                return child.text;
                              })}
                            </p>
                          );
                        }
                        
                        // Render list blocks with simple text items
                        if (block.type === 'list') {
                          return (
                            <ul class="content-list">
                              {block.children.map((item: any) => (
                                <li>
                                  {item.children.map((child: any) => child.text).join('')}
                                </li>
                              ))}
                            </ul>
                          );
                        }
                        
                        // Skip unsupported block types
                        return null;
                      })}
                    </div>

                    {section.links && section.links.length > 0 && (
                      <div class="section-links">
                        {section.links.map((link) => (
                          <a
                            href={link.url}
                            class="info-link"
                            target={
                              link.url.startsWith('http') ? '_blank' : undefined
                            }
                            rel={
                              link.url.startsWith('http')
                                ? 'noopener noreferrer'
                                : undefined
                            }
                          >
                            {link.text}
                            {link.url.startsWith('http') && (
                              <Icon name="lucide:external-link" size={16} />
                            )}
                          </a>
                        ))}
                      </div>
                    )}
                  </AccordionItem>
                ))}
              </Accordion>
            </div>
          )
        }

        <slot />
      </div>
    </div>
  </section>
</DefaultLayout>

<style lang="scss">
  @use '../assets/scss/base/mixins' as *;

  .info-page {
    padding: var(--space-xl) 0 var(--space-2xl);
  }

  .info-content {
    .container {
      max-width: min(70ch, calc(100vw - var(--space-l) * 2));
      margin: 0 auto;
      padding: 0 var(--space-m);
    }
  }

  .info-sections {
    margin-top: var(--space-xl);
  }

  .section-content {
    padding: var(--space-l);
    
    p {
      margin-bottom: var(--space-m);
      line-height: var(--line-height-relaxed);
      color: var(--foreground-color);

      &:last-child:not(:only-child) {
        margin-bottom: 0;
      }
    }

    .content-list {
      margin: var(--space-m) 0;
      padding-left: var(--space-l);
      
      li {
        margin-bottom: var(--space-s);
        line-height: var(--line-height-relaxed);
        color: var(--foreground-color);
        
        &::marker {
          color: var(--link-color);
        }
      }
    }

    .content-link {
      @include text-decoration(
        var(--link-color),
        var(--link-hover-color)
      );
      color: var(--link-color);
      font-weight: 500;
      
      &:hover,
      &:focus-visible {
        color: var(--link-hover-color);
      }
    }
  }

  .section-links {
    display: flex;
    flex-direction: column;
    gap: var(--space-s);
    padding: var(--space-m) var(--space-l) var(--space-l);
    border-top: 1px solid var(--border-color-subtle);
    background-color: var(--color-neutral-100);
  }

  .info-link {
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-s) var(--space-m);
    background-color: var(--background-color);
    border: 1px solid var(--border-color-subtle);
    border-radius: var(--radius-s);
    color: var(--link-color);
    font-weight: 500;
    text-decoration: none;
    transition: 
      background-color var(--animation-speed-fast) var(--cubic-bezier),
      border-color var(--animation-speed-fast) var(--cubic-bezier),
      color var(--animation-speed-fast) var(--cubic-bezier),
      transform var(--animation-speed-fast) var(--cubic-bezier);

    &:hover,
    &:focus-visible {
      background-color: var(--link-color);
      border-color: var(--link-color);
      color: var(--background-color);
      transform: translateY(-1px);
    }

    &:focus-visible {
      outline: 2px solid var(--link-color);
      outline-offset: 2px;
    }

    svg {
      flex-shrink: 0;
      width: 1rem;
      height: 1rem;
    }
  }

  // Responsive adjustments
  @media (max-width: 48rem) {
    .info-page {
      padding: var(--space-l) 0 var(--space-xl);
    }

    .info-content .container {
      padding: 0 var(--space-s);
    }

    .section-content {
      padding: var(--space-m);
    }

    .section-links {
      padding: var(--space-m);
    }

    .info-link {
      padding: var(--space-s);
      font-size: var(--font-size--1);
    }
  }
</style>
