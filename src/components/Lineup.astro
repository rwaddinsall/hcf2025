---
// Lineup component for Hopkins Creek Festival
import { getAllArtists } from "../utils/static-content";

interface ArtistData {
  name: string;
  annotation?: string; // [live], [GER], [UK], etc.
  size?: "small" | "medium" | "large" | "xl";
  socialLink?: string; // URL for artist's social media or website
}

// Get artists from static content
let strapiArtists: import("../interfaces/strapi").Artist[] = [];

try {
  strapiArtists = getAllArtists();
} catch (error) {
  console.error("Failed to get artists from static content:", error);
  // Gracefully handle error - component will show empty lineup
}

// Transform Strapi data to component format
const artists: ArtistData[] = strapiArtists.map((artist) => {
  let annotation = "";

  // Build annotation from country and live status
  if (artist.country && artist.isLive) {
    annotation = `${artist.country}, live`;
  } else if (artist.country) {
    annotation = artist.country;
  } else if (artist.isLive) {
    annotation = "live";
  }

  return {
    name: artist.name,
    annotation: annotation || undefined,
    size: "medium" as const, // Consistent size for all artists
    socialLink: artist.socialLink, // Include social link from Strapi
  };
});

// Sort by display order, then alphabetically
artists.sort((a, b) => {
  // Find original Strapi data for display order
  const strapiA = strapiArtists.find((sa) => sa.name === a.name);
  const strapiB = strapiArtists.find((sa) => sa.name === b.name);

  const orderA = strapiA?.displayOrder ?? 999;
  const orderB = strapiB?.displayOrder ?? 999;

  if (orderA !== orderB) {
    return orderA - orderB;
  }

  return a.name.localeCompare(b.name);
});
---

<section id='lineup' class='lineup-section'>
  <div class="container lineup-container">
    {
      artists.length > 0 ? (
        <div
          class="lineup-grid"
          role="list"
          aria-label="Festival artist lineup"
        >
          {artists.map((artist, index) => (
            <div
              class={`lineup-artist ${artist.size || "medium"}`}
              role="listitem"
              data-artist={artist.name}
              data-index={index}
            >
              <h2 class="artist-name">
                {artist.socialLink ? (
                  <a
                    href={artist.socialLink}
                    class="artist-link"
                    target="_blank"
                    rel="noopener noreferrer"
                    aria-label={`Visit ${artist.name}'s website or social media page`}
                  >
                    <span class="artist-text">{artist.name}</span>
                    {artist.annotation && (
                      <span
                        class="artist-annotation"
                        aria-label={`Additional info: ${artist.annotation}`}
                      >
                        ({artist.annotation})
                      </span>
                    )}
                  </a>
                ) : (
                  <>
                    <span class="artist-text">{artist.name}</span>
                    {artist.annotation && (
                      <span
                        class="artist-annotation"
                        aria-label={`Additional info: ${artist.annotation}`}
                      >
                        ({artist.annotation})
                      </span>
                    )}
                  </>
                )}
              </h2>
            </div>
          ))}
        </div>
      ) : (
        <div class="lineup-empty" role="status" aria-live="polite">
          <p>Artist lineup coming soon...</p>
        </div>
      )
    }
  </div>
</section>

<style lang="scss">
  @use "../assets/scss/base/breakpoint" as *;

  /* Lineup Section - Modern CSS with Design System Tokens */
  .lineup-section {
    // Mobile-first responsive padding
    padding: var(--space-s) var(--space-2xs); // Minimal padding for very small screens

    @include breakpoint("xs") {
      padding: var(--space-m) var(--space-xs); // 320px+ gets more padding
    }

    @include breakpoint("s") {
      padding: var(--space-m) var(--space-s); // 480px+ normal padding
    }

    @include breakpoint("m") {
      padding: var(--space-l) var(--space-m); // 768px+ generous padding
    }

    @include breakpoint("l") {
      padding: var(--space-xl) var(--space-l); // 1024px+ maximum padding
    }
  }

  .lineup-container {
    // Only keep lineup-specific overrides here if needed
  }

  /* Lineup Grid - Flexible Layout */
  .lineup-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: baseline;
    // Very small screen gaps - minimal spacing
    gap: var(--space-5xs) var(--space-2xs);
    text-align: center;

    @include breakpoint("xs") {
      gap: var(--space-5xs) var(--space-xs); // 320px+ slightly more spacing
    }

    @include breakpoint("s") {
      gap: var(--space-5xs) var(--space-s); // 480px+ normal spacing
    }

    @include breakpoint("m") {
      gap: var(--space-3xs) var(--space-m); // 768px+ generous spacing
    }

    @include breakpoint("l") {
      gap: var(--space-2xs) var(--space-l); // 1024px+ maximum spacing
    }
  }

  /* Artist Item - Base Styling */
  .lineup-artist {
    position: relative;
    white-space: normal;
    opacity: 0;
    animation: fadeInUp 0.6s var(--cubic-bezier, ease) forwards;
    padding: var(--space-4xs) var(--space-3xs);
    border-radius: var(--radius-xs);
    cursor: pointer; // Add cursor pointer for all artists
    transition:
      opacity var(--animation-speed-fast, 0.2s) var(--cubic-bezier, ease),
      transform var(--animation-speed-fast, 0.2s) var(--cubic-bezier, ease),
      background-color var(--animation-speed-fast, 0.2s) var(--cubic-bezier, ease);

    @include breakpoint('xs') {
      white-space: normal;
    }

    // Hover effects for ALL artists (whether they have links or not)
    &:hover {
      transform: translateY(-2px) scale(1.02);
      
      .artist-text {
        color: var(--link-hover-color);
        font-weight: 600;
        text-shadow: 0 2px 8px rgba(0,0,0,0.08);
      }
      
      .artist-annotation {
        opacity: 1;
        color: var(--link-hover-color);
      }
    }

    // Focus styles for accessibility (when artist has a link)
    &:has(.artist-link:focus-visible) {
      .artist-text {
        color: var(--link-hover-color);
        font-weight: 600;
      }
      
      .artist-annotation {
        opacity: 1;
        color: var(--link-hover-color);
      }
    }
  }

  /* Grid Hover Effects - Updated */
  .lineup-grid:hover .lineup-artist {
    opacity: 0.6; // Dim non-hovered artists
  }

  .lineup-grid:hover .lineup-artist:hover {
    opacity: 1; // Full opacity for hovered artist
  }

  /* Artist Text - Main Name */
  .artist-text {
    display: inline-block;
    color: var(--foreground-color);
    transition: 
      color var(--animation-speed-fast, 0.2s) var(--cubic-bezier, ease),
      font-weight 0.2s var(--cubic-bezier, ease),
      text-shadow 0.2s var(--cubic-bezier, ease);
  }

  /* Artist Link - Enhanced Styling (for artists with social links) */
  .artist-link {
    color: inherit;
    text-decoration: none;
    display: inline-block;
    transition:
      color var(--animation-speed-fast, 0.2s) var(--cubic-bezier, ease),
      text-decoration-color var(--animation-speed-fast, 0.2s) var(--cubic-bezier, ease);
    border-radius: var(--radius-xs);
    padding: var(--space-5xs) var(--space-4xs);
    margin: calc(var(--space-5xs) * -1) calc(var(--space-4xs) * -1);

    &:where(:hover, :focus-visible) {
      text-decoration: underline;
      text-decoration-color: var(--link-hover-color);
      text-decoration-thickness: 2px;
      text-underline-offset: 0.25em;
    }

    &:focus-visible {
      outline: none;
    }
  }

  /* Artist Annotation - Metadata Styling */
  .artist-annotation {
    font-size: 0.6em;
    font-weight: 300;
    font-family: var(--font-heading);
    margin-inline-start: var(--space-4xs);
    opacity: 0.8;
    color: var(--foreground-color);
    vertical-align: super;
    transition: 
      opacity var(--animation-speed-fast, 0.2s) var(--cubic-bezier, ease),
      color var(--animation-speed-fast, 0.2s) var(--cubic-bezier, ease);

    @include breakpoint("m") {
      font-size: 0.55em;
      margin-inline-start: var(--space-3xs);
    }

    @include breakpoint("l") {
      font-size: 0.5em;
      margin-inline-start: var(--space-2xs);
    }
  }

  /* Artist Name Typography */
  .artist-name {
    margin: 0;
    // Mobile-first typography sizing - reduced by one size for all screens
    font-size: var(--font-size-3);
    font-family: var(--font-heading);
    line-height: 1.2;

    @include breakpoint("xs") {
      font-size: var(--font-size-3);
    }

    @include breakpoint("s") {
      font-size: var(--font-size-4);
    }

    @include breakpoint("m") {
      font-size: var(--font-size-4);
    }

    @include breakpoint("l") {
      font-size: var(--font-size-5);
    }
  }


  /* Animation Keyframes */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(var(--space-xs));
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Empty State Styling */
  .lineup-empty {
    text-align: center;
    padding: var(--space-xl);
    color: var(--foreground-color);
    opacity: 0.7;

    p {
      font-size: var(--font-size-1);
      font-family: var(--font-body);
      margin: 0;
    }
  }

  /* High Contrast Mode Support */
  @media (prefers-contrast: high) {
    .lineup-artist {
      border: 1px solid transparent;
    }

    .artist-link:where(:hover, :focus-visible) {
      border: 2px solid currentColor;
      outline: none;
    }
  }

  /* Reduced Motion Support */
  @media (prefers-reduced-motion: reduce) {
    .lineup-artist {
      animation: none;
      opacity: 1;
    }

    .lineup-artist,
    .artist-link,
    .artist-annotation {
      transition: none;
    }
  }

  /* Print Styles */
  @media print {
    .lineup-section {
      padding: 0;
    }

    .lineup-grid {
      display: block;
      columns: 3;
      column-gap: var(--space-m);
    }

    .lineup-artist {
      break-inside: avoid;
      margin-bottom: var(--space-xs);
      opacity: 1;
      animation: none;
    }
  }
</style>

<script>
  // Enhanced lineup interactivity with modern JavaScript
  document.addEventListener("DOMContentLoaded", () => {
    const lineupGrid = document.querySelector(".lineup-grid");
    const artists = document.querySelectorAll(".lineup-artist");

    if (!lineupGrid || !artists.length) return;

    // Add staggered animation delays using IntersectionObserver for performance
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement;
          const index = parseInt(element.dataset.index || "0", 10);

          // Staggered animation delay
          element.style.animationDelay = `${index * 0.03}s`;

          // Remove observer after animation starts
          observer.unobserve(element);
        }
      });
    }, observerOptions);

    // Observe all artist elements
    artists.forEach((artist) => {
      observer.observe(artist);
    });

    // Enhanced keyboard navigation
    lineupGrid.addEventListener("keydown", (event) => {
      const keyboardEvent = event as KeyboardEvent;
      if (
        ![
          "ArrowLeft",
          "ArrowRight",
          "ArrowUp",
          "ArrowDown",
          "Home",
          "End",
        ].includes(keyboardEvent.key)
      ) {
        return;
      }

      event.preventDefault();
      const focusedElement = document.activeElement as HTMLElement;
      const focusableElements = Array.from(
        lineupGrid.querySelectorAll(".artist-link")
      );
      const currentIndex = focusableElements.indexOf(focusedElement);

      if (currentIndex === -1) return;

      let newIndex = currentIndex;

      switch (keyboardEvent.key) {
        case "ArrowLeft":
        case "ArrowUp":
          newIndex =
            currentIndex > 0 ? currentIndex - 1 : focusableElements.length - 1;
          break;
        case "ArrowRight":
        case "ArrowDown":
          newIndex =
            currentIndex < focusableElements.length - 1 ? currentIndex + 1 : 0;
          break;
        case "Home":
          newIndex = 0;
          break;
        case "End":
          newIndex = focusableElements.length - 1;
          break;
      }

      (focusableElements[newIndex] as HTMLElement)?.focus();
    });

    // Announce lineup changes for screen readers
    const announceLineup = () => {
      const artistCount = artists.length;
      const announcement = `Festival lineup loaded with ${artistCount} artist${artistCount !== 1 ? "s" : ""}`;

      // Create temporary announcement element
      const announcer = document.createElement("div");
      announcer.setAttribute("aria-live", "polite");
      announcer.setAttribute("aria-atomic", "true");
      announcer.className = "sr-only";
      announcer.textContent = announcement;

      document.body.appendChild(announcer);

      // Remove after announcement
      setTimeout(() => {
        document.body.removeChild(announcer);
      }, 1000);
    };

    // Announce lineup after animations complete
    setTimeout(announceLineup, 1000);
  });
</script>
