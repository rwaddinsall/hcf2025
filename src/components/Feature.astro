---
/**
 * Feature Component
 *
 * @description A component that displays a feature with an icon, title, and description
 */
interface Props {
  /**
   * The icon to display
   */
  icon: string;
  /**
   * The title to display
   */
  title: string;
}

const { title = "Title" }: Props = Astro.props;
---

<div class="flex flex-col gap-4 feature">
  <div class="content">
    <h2 class="text-2xl font-bold">{title}</h2>
    <p>
      <slot
        >Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic, corporis.</slot
      >
    </p>
  </div>
</div>

<style lang="scss">
  @use "../assets/scss/base/breakpoint" as *;

  .feature {
    position: relative;
    padding: var(--space-l);
    inline-size: calc(100% - var(--space-l));
    cursor: pointer;
    transition: all var(--animation-speed-fast) var(--cubic-bezier);

    > * {
      position: relative;
      z-index: 2;
    }

    .content h2 {
      color: var(--color-neutral-900) !important;
      font-size: var(--font-size-4);
      line-height: var(--font-size-5);
      transition: color var(--animation-speed-fast) var(--cubic-bezier);
    }

    .content p {
      color: var(--color-neutral-300) !important;
      transition: color var(--animation-speed-fast) var(--cubic-bezier);
    }

    @include breakpoint(xl) {
      inline-size: 100%;
    }

    &::before,
    &::after {
      position: absolute;
      content: "";
      transition: all var(--animation-speed-fast) var(--cubic-bezier);
    }

    &::before {
      z-index: 1;
      inset: 0;
      box-shadow: 0 0 0 6px var(--color-neutral-100);
      border: 3px solid var(--color-neutral-700);
      border-radius: var(--radius-l);
      background-color: var(--color-neutral-100);
    }

    &::after {
      z-index: 0;
      border-radius: var(--radius-l);
      background-color: var(--link-color);
    }

    // Hover effect
    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);

      &::before {
        background-color: var(--color-neutral-900);
        border-color: var(--color-neutral-900);
        box-shadow: 0 0 0 6px var(--color-neutral-900);
      }

      .content h2,
      .content p,
      h2,
      p,
      * {
        color: var(--color-neutral-100) !important;
      }
    }

    &:active {
      transform: translateY(0);
    }

    &:focus-visible {
      outline: 2px solid var(--color-neutral-900);
      outline-offset: 4px;
    }
  }

  // Dark mode adjustments
  :global(.darkmode) .feature {
    &::before {
      box-shadow: 0 0 0 6px var(--color-neutral-900);
      background-color: var(--color-neutral-900);
      border-color: var(--color-neutral-100);
    }

    h2,
    p {
      color: var(--color-neutral-100);
    }

    &:hover {
      &::before {
        background-color: var(--color-neutral-100);
        border-color: var(--color-neutral-100);
        box-shadow: 0 0 0 6px var(--color-neutral-100);
      }

      h2,
      p {
        color: var(--color-neutral-900);
      }
    }

    &:focus-visible {
      outline-color: var(--color-neutral-100);
    }
  }
</style>
